{
	"useImperativeHandle": {
		"prefix": ["uih", "useImperativeHandle", "hooks.useImperativeHandle"],
		"body": [
			"// exposed components",
			"import React, { useRef, useImperativeHandle, forwardRef } from 'react'",
			"",
			"function Button(props, ref) {",
			"\tconst buttonRef = useRef()",
			"\tuseImperativeHandle(ref, () => ({",
			"\t\texposedProperty: () => {",
			"\t\t\tconsole.log(`event in Button`)",
			"\t\t},",
			"\t}))",
			"\treturn (",
			"\t\t<button ref={buttonRef} {...props}>",
			"\t\t\tButton",
			"\t\t</button>",
			"\t)",
			"}",
			"",
			"",
			"export default forwardRef(Button)",
			"",
			"",
			"// parent components ",
			"import React, { useRef } from 'react'",
			"import Button from './Button'",
			"",
			"function Form() {",
			"\tconst buttonRef = useRef(null)",
			"",
			"\tconst handleClick = () => {",
			"\t\tconsole.log(Object.keys(buttonRef.current)) // ['exposedProperty']",
			"\t\tconsole.log('event in Form')",
			"\t\tbuttonRef.current.exposedProperty()",
			"\t}",
			"",
			"\treturn (",
			"\t\t<>",
			"\t\t\t<Button onClick={handleClick} ref={buttonRef} />",
			"\t\t</>",
			"\t)",
			"}"
		],
		"description": "`useImperativeHandle()`, customizes the instance value that is exposed to parent components when using `ref`.\n"
	}
}
